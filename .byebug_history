c
params
answervotes.voted?(current_user)
answer.voted?(current_user).present?
answer.voted?(current_user)
c
@answer.voted?(current_user)
answer.voted?(current_user)
c
@answer.voted?(current_user)
c
@answer.voted?(current_user)
c
User.all.order("first_name desc, last_name desc").map(&:full_name)
User.all.order("first_name asc, last_name asc").map(&:full_name)
User.all.order("first_name, last_name").map(&:full_name)
User.all
@question.order("users.first_name, users.last_name")
@question.order("users.first_name, users.last_name").map(&:full_name)
@question.order("users.first_name, users.last_name").map(&:full)name)
@question.order("users.first_name, users.last_name").map(&:name)
all_user_id
followers_user_id
c
self.changes["deleted"] == [true, false]
self.changes["deleted"]
self.changes
self.model_changes
self.changes.has_value? [true,false]
self.changes.has_value? true,false
self.changes.has_value true,false
 self.changes.has_key? "deleted" 
 c
self.changes.has_key? "deleted"
self.changes.has_key? deleted
self.changes.has_key? "deleted"
self.changes.has_key? ["deleted"]
self.changes.has_key? [deleted]
self.changes.has_key? [deleted[
self.changes.keys
self.changes.methods
self.changes.method
self.changes.key
self.changes.key? deleted
c
self.changes.has_value? [false,true]
self.changes.has_value? [true,false]
self.changes.values
self.changes.each_value
self.changes.values
self.changes.value[0]
self.changes[deleted]
self.changes.deleted
self.changes.keys
self.changes.values[0]
self.changes.values
self.changes.eql? false
self.changes.eql? true
self.changes.eq? true
self.changes.eq true
self.changes.methods
self.changes == true
self.changes == false
self.changes['true'].any?
self.changes['true']
deleted[true]
self.changes
self.changes[true]
self.changes
c
self.changes
self.deleted_changed?
c
@answer
@answer.id
params
c
params
c
params
c
params
c
params
c
params
c
params
c
assigns(:user)
assign(:user)
c
assigns(:user) == load_all_users
assigns(:user).eql?load_all_users
assigns(:users).eql?load_all_users
assigns(:users) == load_all_users
load_all_users
assigns(:user)
c
print(:user)
print(@user)
assigns(:user)
c
response.body
check
assigns(:user)
c
puts @user.errors.full_messages.join("\n")
@user.errors.full_messages.join("\n")
@user.errors.full_messages.join('\n')
@user.errors.full_messages.map{|x| "#{x}\\n"}
@user.errors.full_messages.map{|x| "#{x}\n"}
@user.errors.full_messages
c
for i in 0..@user.errors.full_messages.count
 @user.errors.full_messages.map{|x| x} 
for @user.errors.full_messages each |em| do
@user.errors.full_messages.count
c
@user.errors.full_messages
@user.errors.full_messages[0]
@user.errors.full_messages
@user.@messages[email]
@user.@messages[:email]
@user.@messages
@messages
@user.errors
c
@user.errors[register_number]
@user.errors.register_number
@user.errors
c
flash[value]
flash[key]
success:
success
params
c
flash[key]
flash
params
render :new, danger: "Mail id already taken"
success
danger
c
@user
value
flash[key]
key
danger
c
current_user.followings.find_by(id: 19 )
current_user.followings.find_by(id: user )
current_user.followings.find_by(following_id: user)
current_user.followings.find_by(follwoing_id: user)
current_user.followings.find_by(follwoing_id: user_id)
current_user.followings.find_by(follwoing_id: 21)
current_user.followings(follwoing_id: 21)
current_user.followings(21)
current_user.followings(user)
current_user.followings
current_user.following
user.followings
user.following
Relationship.find_by(follower_id: 20,following_id: 19)
Relationship.find_by(follower_id: :current_user.id, following_id: :user.id )
c
@question.answers.new(params.require(:answer).permit(:answer))
c
c)
@question.answers.new()
@question.answers.new
@question.answers
@question.answer
@question
c
@question.to_i
@question
@question = @question[:question_id]
@question = @question[:question_id].to_i
@question.answers.new(answer_params).to_i
@question.answer
@question
@question.answers.new(answer_params)
c
@answer.answervotes.count
@answer
@answervote
c
@answer
c
@answer
c
@answer
c
answer.answer
c
answer.answer
c
answer.answer
c
answer.answer
c
answer.answer
c
answer.answer
c
Answer.order("vote_count DESC").where("ques_id = ?", params[:id])
c
Answer.order("vote_count DESC").where("ques_id = ?", params[:id])
c
Answer.order("vote_count DESC").where("ques_id = ?", params[:id])
c
@answer.@answervotes(count)
@answer.@answervotes
@answer(@answervotes)
@answer.@answervotes.count
@answer.@answervotes
@answer.answervotes
answer.answervotes
@answer.answervotes
Answers.@answervote
answers.@answervote
answer.@answervote
@answervote
Answer.@answervote.count
c
@answervote.count
Answer.@answervote.count
@answervote.answer.count
@answervote.count
@answer
order(@answervote.count)
c
answer.@answervote.count
@answer.@answervote.count
@answervote.count
c
@answervotes.count
answervotes.count
@answer.answervotes.count
c
answer.answervotes[0].user_id
answer.answervotes
answer.answervotes[0].user_id
answer.answervotes
answer.answervotes.pluck(:user_id)
answer.answervotes.select(:user_id)
session[:user_id]
c
answer.answervotes.select(:user_id).class
answer.answervotes.select(:user_id).to_i == 15
answer.answervotes.select(:user_id) == 15
answer.answervotes.select(:user_id)
answer.answervotes
answer.answervotes.user_id
